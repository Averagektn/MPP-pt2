// Выполняется сразу синхронно, чтобы нельзя было изменять состояние
// const promise = new Promise((resolve, reject) =>{
//     resolve();
// });

// Можно изменить состояние
// let resolve;
// const promise = new Promise((res, rej) =>{
//     resolve();
// });

// Промисы можно использовать, чтобы выполнять некоторые действия после подгрузки элементов

// Модули можно использовать только по HTTP

// await работает с любой функцией с then

// Не будет заморозки интерфейса и переполнения стека. Коллбек попадет в очередь задач по истечении времени
//function fib(a, b){
//    const next = a + b;
//    setTimeout(() => {
//        fib(b, next)
//    }, 0)
//}

// Очередь микрозадач более приоритетна, чем очередь задач и выполняется полностью до опустения. Может заблокировать интерфейс при рекурсии
// Интерфейс перерисовывается после каждой задачи

// Параллельно - физически одновременно
// Конкурентность - переключение контекста на 1 ядре
// Асинхронно - выполнится когда-то

//   